// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target armv7-apple-ios10.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name Nami
import AVFoundation
import AudioUnit
import CoreML
import CoreMedia
import CoreServices
import CoreTelephony
import Foundation
import MediaPlayer
import Messages
import MobileCoreServices
import MultipeerConnectivity
@_exported import Nami
import SafariServices
import Security
import StoreKit
import Swift
import UIKit
import WebKit
public enum NamiSignals {
  case readyToBuy
  case smartPaywallActive
  public static func == (a: NamiSignals, b: NamiSignals) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias NamiConfidence = Swift.Double
public typealias NamiSignalCallback = (NamiConfidence) -> Swift.Void
public enum NamiPaywallInitiationType {
  case userAction
  case appTrggered
  case triggerRule
  case smart
  public static func == (a: NamiPaywallInitiationType, b: NamiPaywallInitiationType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class NamiSignalManager {
  public static var shared: NamiSignalManager
  public func signalPlayingState(playingState: Swift.String)
  public func addHandler(forSignal signal: NamiSignals, handler: NamiSignalCallback?)
  public func paywallRaisedImpression(paywallSource: NamiPurchaseSource)
  public func buyScreenComplete(purchaseSuccess: Swift.Bool, productID: Swift.String, transactionID: Swift.String?, purchaseSource: NamiPurchaseSource, purchaseInfo: [Swift.AnyHashable : Any])
  public func buyScreenCompleteTransactionDelayed(impressionUUID: Swift.String, productID: Swift.String, transactionID: Swift.String, purchaseSource: NamiPurchaseSource, purchaseInfo: [Swift.AnyHashable : Any])
  public func buyScreenCompleteDelayed(purchaseSuccess: Swift.Bool, productID: Swift.String, transactionID: Swift.String?, purchaseSource: NamiPurchaseSource, purchaseInfo: [Swift.AnyHashable : Any])
  @objc deinit
}
public enum BypassAdvanceSecondConstants : Foundation.TimeInterval {
  case day
  case week
  public typealias RawValue = Foundation.TimeInterval
  public init?(rawValue: Foundation.TimeInterval)
  public var rawValue: Foundation.TimeInterval {
    get
  }
}
public class NamiStoreKitTesting {
  public static func bypassAdvanceDate(bySeconds seconds: Foundation.TimeInterval?)
  @objc deinit
}
@objc public class NamiCorrectiveFlowLayout : UIKit.UICollectionViewFlowLayout {
  @objc override dynamic public func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class NamiConfiguration : ObjectiveC.NSObject {
  @objc public static var mlEnabled: Swift.Bool
  @objc public static var analyticsEnabled: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public typealias ProductIdentifier = Swift.String
public typealias ProductsRequestCompletionHandler = (Swift.Bool, [NamiMetaProduct]?, [ProductIdentifier]?, Swift.Error?) -> Swift.Void
public typealias StoreKitProductsRequestCompletionHandler = (Swift.Bool, [StoreKit.SKProduct]?, [ProductIdentifier]?, Swift.Error?) -> Swift.Void
extension NSNotification.Name {
  public static let NamiStoreKitHelperPurchaseNotification: Foundation.Notification.Name
  public static let NamiStoreKitPurchaseFailureNotification: Foundation.Notification.Name
}
public typealias NamiPurchaseResponseHandler = ([NamiMetaPurchase], NamiPurchaseState, Swift.Error?) -> ()
public typealias RestorePurchaseCompleteHandler = (Swift.Bool, Swift.Error?) -> ()
public enum StoreKitEnvironment : Swift.String {
  case production
  case sandbox
  case namiStoreKitBypass
  case environmentNotYetDetected
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum StoreKitEnvironmentObjC : Swift.Int {
  case production
  case sandbox
  case namiStoreKitBypass
  case environmentNotYetDetected
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NamiPurchaseState : Swift.Int {
  case pending
  case purchased
  case consumed
  case resubscribed
  case unsubscribed
  case purchasedNotValidated
  case deferred
  case failed
  case cancelled
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SandboxAccelerationItemUnit : Swift.Int {
  case hour
  case week
  case month
  case sixMonth
  case year
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class NamiStoreKitHelper : ObjectiveC.NSObject {
  @objc public static let shared: NamiStoreKitHelper
  @objc public static let noProductIdentifier: Swift.String
  public var bypassStoreKit: Swift.Bool {
    get
    }
  public var subscriptionAccelerationToMinutesMap: [SandboxAccelerationItemUnit : Swift.Double] {
    get
    }
  public var numberOfResubscriptionsEightHours: Swift.Int {
    get
    }
  public var storeKitEnvironment: StoreKitEnvironment {
    get
    }
  @objc public func bypassStoreKit(bypass: Swift.Bool)
  public func bypassStoreKit(bypass: Swift.Bool, customAccelerationToMinutesMap: [SandboxAccelerationItemUnit : Swift.Double] = [:], customResubscriptionsEightHours: Swift.Int = -1)
  @objc public func clearBypassStoreKitPurchases()
  @objc public func buyProduct(_ metaProduct: NamiMetaProduct, fromPaywall paywall: NamiMetaPaywall? = .none, responseHandler: @escaping NamiPurchaseResponseHandler)
  @objc public func verifyReceipt(completion: @escaping NamiVerifyReceiptHandler)
  @objc public func isProductPurchased(_ productID: ProductIdentifier) -> Swift.Bool
  @objc public func anyProductPurchased(_ productIDs: [ProductIdentifier]) -> Swift.Bool
  @objc public func currentPurchaseRecordsForProduct(productID: ProductIdentifier) -> NamiMetaPurchase?
  @objc public func productsForProductIdentifers(productIDs: [ProductIdentifier], productHandler: @escaping ProductsRequestCompletionHandler)
  @objc public func allPurchasedProducts() -> [NamiMetaPurchase]
  @objc public func register(purchasesChangedHandler changeHandler: NamiPurchaseResponseHandler?)
  @objc public static func appReceiptData() -> Foundation.Data?
  @objc public static func appReceiptJSON() -> [Swift.String : Any]
  @objc public static func restorePurchases(handler: @escaping RestorePurchaseCompleteHandler)
  @objc public func consumePurchasedProduct(productID: ProductIdentifier)
  @objc deinit
}
@objc open class StoreKitQueueHelper : ObjectiveC.NSObject {
  public static func buyProduct(_ product: StoreKit.SKProduct)
  public static func canMakePayments() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc extension SKProduct {
  @objc dynamic public func namiInfoDict() -> [Swift.String : Any]
  @objc dynamic public func namiInfoDict(withPurchaseSource purchaseSource: NamiPurchaseSource) -> [Swift.String : Any]
}
@objc extension SKProduct {
  @objc public static var priceFormatter: Foundation.NumberFormatter
  @objc dynamic public var localizedPrice: Swift.String? {
    @objc get
  }
  @objc dynamic public var localizedMultipliedPrice: Swift.String? {
    @objc get
  }
  @available(iOS 11.2, *)
  @objc dynamic public var localizedDuration: Swift.String? {
    @objc get
  }
  @available(iOS 11.2, *)
  @objc dynamic public var localizedDurationNoPer: Swift.String? {
    @objc get
  }
  @available(iOS 11.2, *)
  @objc dynamic public var localizedDurationSingular: Swift.String? {
    @objc get
  }
}
@objc public class MockPaymentTransaction : StoreKit.SKPaymentTransaction {
  @objc override dynamic public var transactionIdentifier: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension NamiPurchaseState : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class NamiExtensionManager : ObjectiveC.NSObject {
  @objc public static var shared: NamiExtensionManager
  @objc public var requestFullScreenPaywalls: Swift.Bool
  @objc public func startupNamiFromMessageExtension(messageViewController: Messages.MSMessagesAppViewController, applicationGroupName: Swift.String?)
  @objc public func extensionDidResign()
  @objc override dynamic public init()
  @objc deinit
}
public typealias NamiVerifyReceiptHandler = (NamiReceiptWrapper?) -> ()
@objc public class ProductOptionCell : UIKit.UICollectionViewCell {
  @objc @IBOutlet weak public var backgroundRoundedView: RoundedView?
  @objc @IBOutlet weak public var descriptionLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var priceLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var durationLabel: UIKit.UILabel?
  @objc @IBOutlet weak public var durationMultiplierLabel: UIKit.UILabel?
  @objc override dynamic public func awakeFromNib()
  public func populatCellFromProduct(metaProduct: NamiMetaProduct)
  public func indicatePurchased(markPurchased: Swift.Bool)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol NamiPaywallController {
  func preparePaywall(products: [NamiMetaProduct], namiPaywall: NamiMetaPaywall)
}
public struct PaywallFeatureFlags {
}
@objc public class NamiPaywallTextFieldCell : UIKit.UICollectionViewCell, UIKit.UITextViewDelegate {
  @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class NamiCommunicationsManager : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate, Foundation.URLSessionDownloadDelegate {
  public static var shared: NamiCommunicationsManager {
    get
  }
  public var savedCompletionHandler: (() -> Swift.Void)?
  @objc override dynamic public init()
  @objc public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
  @objc public func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc deinit
}
public typealias NamiAnalyticsHandler = (NamiAnalyticsActionType, [Swift.String : Any]) -> ()
@objc public class NamiAnalyticsSupport : ObjectiveC.NSObject {
  @objc public static var shared: NamiAnalyticsSupport
  @objc public var analyticsHandler: NamiAnalyticsHandler? {
    get
    }
  @objc public static func registerAnalyticsHandler(handler: NamiAnalyticsHandler?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum NamiAnalyticsActionType : Swift.Int {
  case paywallRaise
  case paywallClosed
  case paywallRaiseBlocked
  case purchaseActivity
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NamiAnalyticsPurchaseActivityType : Swift.Int {
  case newPurchase
  case cancelled
  case resubscribe
  case restored
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class NamiAnalyticsKeys : ObjectiveC.NSObject {
  public static var campaignID: Swift.String
  public static var campaignName: Swift.String
  public static var campaignType: Swift.String
  public static var paywallID: Swift.String
  public static var paywallName: Swift.String
  public static var paywallType: Swift.String
  public static var paywallProducts_NamiMetaProduct: Swift.String
  public static var namiTriggered: Swift.String
  public static var purchasedProduct_NamiMetaProduct: Swift.String
  public static var purchasedProductIdentifier_NamiMetaProduct: Swift.String
  public static var purchasedProductPrice: Swift.String
  public static var purchasedProductStoreLocale: Swift.String
  public static var purchasedProductLocale: Swift.String
  public static var purchasedProductPurchaseTimestamp_Date: Swift.String
  public static var purchaseActivityType_ActivityType: Swift.String
  public static var paywallRaiseSource: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension KeyedDecodingContainer {
  public func decode(_ type: UIKit.UIImage.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key) throws -> UIKit.UIImage
}
@objc @IBDesignable public class RoundedView : UIKit.UIView {
  @objc override dynamic public func awakeFromNib()
  @objc @IBInspectable public var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var maskTopCorners: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var maskBottomCorners: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public class NamiMetaPurchase : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let productIdentifier: ProductIdentifier
  @objc public var transactionIdentifier: ProductIdentifier?
  @objc public var purchaseInitiatedTimestamp: Foundation.Date
  @objc public var isSubscription: Swift.Bool
  @objc public var subscriptionExpirationDate: Foundation.Date?
  @objc public var purchaseSource: NamiPurchaseSource
  @objc public var metaProduct: NamiMetaProduct? {
    @objc get
    @objc set
  }
  public var fromPaywall: NamiMetaPaywall?
  public var transaction: StoreKit.SKPaymentTransaction?
  public var receiptInfo: NamiReceiptIAPWrapper?
  public var complete: Swift.Bool
  public var state: NamiPurchaseState
  public var isPurchased: Swift.Bool {
    get
  }
  public init(productIdentifier: ProductIdentifier, purchaseSource: NamiPurchaseSource)
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NamiMetaProduct : ObjectiveC.NSObject {
  @objc public var product: StoreKit.SKProduct
  @objc public var namiProductInfoDict: [Swift.String : Any]
  @objc public var productIdentifier: Swift.String {
    @objc get
  }
  @objc public var isPurchased: Swift.Bool {
    @objc get
  }
  @objc public var productPurchase: NamiMetaPurchase? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NamiMetaPaywall : ObjectiveC.NSObject {
  @objc public var paywallID: Swift.String
  @objc public var namiPaywallInfoDict: [Swift.String : Any]
  @objc public var backgroundImage: UIKit.UIImage?
  @objc public var developerPaywallID: Swift.String {
    @objc get
  }
  @objc public var title: Swift.String {
    @objc get
  }
  @objc public var body: Swift.String {
    @objc get
  }
  public func paywallValue<T>(forKey key: Swift.String) -> T?
  public func paywallValue<T>(forKey key: NamiMetaPaywallKeys) -> T?
  public func attributedTextFromPaywallConfig(key: NamiMetaPaywallConfigKeys, baseFont: UIKit.UIFont) -> Foundation.NSAttributedString?
  @objc override dynamic public init()
  @objc deinit
}
public typealias NamiWorker = () -> Swift.Void
@objc public class Nami : ObjectiveC.NSObject {
  @objc public static var shared: Nami
  @objc public func doConfigBasedWork(worker: @escaping NamiWorker)
  @objc public var smartPaywall: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var mlEnabled: Swift.Bool
  @objc public func registerNamiLogger(logger: NamiLogger)
  @objc public func configure(appID: Swift.String)
  @objc public static func configure(appID: Swift.String)
  @objc public static func enterCoreContent(label: Swift.String)
  @objc public static func exitCoreContent(label: Swift.String)
  @objc public static func coreAction(label: Swift.String)
  @objc deinit
}
@objc public class NamiApplication : UIKit.UIApplication {
  @objc override dynamic public func sendEvent(_ event: UIKit.UIEvent)
  @objc deinit
}
@objc public class NamiCommand : ObjectiveC.NSObject {
  @objc public static func performCommand(_ commandString: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public enum NamiServerConfigKeys : Swift.String {
  case campaigns
  case config
  case tos_link
  case privacy_policy
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum NamiCampaignPaywallMappingKeys : Swift.String {
  case user_triggered
  case nami_triggered
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum NamiMetaCampaignConfigKeys : Swift.String {
  case id
  case ctas
  case created_date
  case updated_date
  case campaign_id
  case name
  case live
  case type
  case rules
  case user_triggered
  case nami_triggered
  case nami_triggered_smart_paywall_enabled
  case paywall_mapping
  case flash_start
  case flash_end
  case flash_timing
  case ml_enabled
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum NamiMetaPaywallKeys : Swift.String {
  case id
  case name
  case products
  case config
  case background_image_url
  case background_thumb_url
  case created_date
  case updated_date
  case paywall_id
  case type
  case marketing_content
  case enabled
  case rules
  case isDefault
  case app_id
  case developer_paywall_id
  case sign_in_control
  case restore_control
  case purchase_terms
  case allow_closing
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum NamiMetaProductKeys : Swift.String {
  case id
  case created_date
  case updated_date
  case uuid
  case product_id
  case app_id
  case paywalls
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum NamiMetaPaywallConfigKeys : Swift.String {
  case title
  case body
  case button_title
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@objc public enum NamiPurchaseSource : Swift.Int {
  case external
  case namiPaywall
  case application
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum NamiPurchaseResult : Swift.Int {
  case purchased
  case renewed
  case deferred
  case retrying
  case canceled
  case blocked
  case failed
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct NamiPurchaseTransaction {
}
public typealias NamiPaywallProvider = (UIKit.UIViewController?, [NamiMetaProduct]?, Swift.String, NamiMetaPaywall) -> ()
public typealias NamiCustomPaywallHandler = ([NamiMetaProduct]?, Swift.String, NamiMetaPaywall?) -> ()
public typealias NamiSignInProvider = (UIKit.UIViewController?, Swift.String, NamiMetaPaywall) -> ()
public typealias NamiAutoRaisePaywallBlocker = () -> Swift.Bool
@objc public class NamiPaywallManager : ObjectiveC.NSObject {
  @objc public static var shared: NamiPaywallManager
  @objc public func presentNamiPaywall(fromVC: UIKit.UIViewController?, products: [NamiMetaProduct]?, paywallMetadata: NamiMetaPaywall, backgroundImage: UIKit.UIImage?, forNami: Swift.Bool)
  @objc public static func registerApplicationAutoRaisePaywallBlocker(_ applicationAutoRaisePaywallBlocker: NamiAutoRaisePaywallBlocker?)
  @objc public static func fetchCustomPaywallMetaForDeveloperID(_ developerPaywallID: Swift.String, _ namiCustomPaywallHandler: @escaping NamiCustomPaywallHandler)
  @objc public static func register(applicationPaywallProvider: NamiPaywallProvider?)
  @objc public static func register(applicationSignInProvider: NamiSignInProvider?)
  @objc public func canRaisePaywall() -> Swift.Bool
  @objc public func raisePaywall(fromVC: UIKit.UIViewController?)
  @objc public func raisePaywall(fromVC: UIKit.UIViewController?, forNami: Swift.Bool = false)
  @objc deinit
}
extension NamiPurchaseSource : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol NamiVisualizer {
  func setValue1(_ newValue: Swift.Double)
  func setValue2(_ newValue: Swift.Double)
  func setValue3(_ newValue: Swift.Double)
  func setScore(score: Swift.String)
  func plotScoreHistory(values: [CoreGraphics.CGFloat])
  func setStatus(status: Swift.String)
}
public enum PurchaseReadyState : Swift.String {
  case notReadyToPurchase
  case neutralPurchase
  case likleyToPurchase
  case readyToPurchase
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public class NamiVisualizationManager {
  public static var shared: NamiVisualizationManager
  public static let neutralEntry: CoreGraphics.CGFloat
  public static let likleyToPurchaseEntry: CoreGraphics.CGFloat
  public static func registerNamiVisualizer(_ visualizer: NamiVisualizer)
  @objc deinit
}
@objc public protocol NamiLogger : ObjectiveC.NSObjectProtocol {
  @objc func logHTTP(request: Foundation.URLRequest, response: Foundation.HTTPURLResponse, responseData: Foundation.Data?, message: Swift.String)
  @objc func logMessage(_ message: Swift.String)
}
public enum StoreKitReceiptKeys : Swift.String {
  case status
  case environment
  case in_app
  case pending_renewal_info
  case latest_receipt_info
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum StoreKitReceiptInAppItemKeys : Swift.String {
  case quantity
  case product_id
  case transaction_id
  case original_transaction_id
  case purchase_date
  case purchase_date_ms
  case purchase_date_pst
  case original_purchase_date
  case original_purchase_date_ms
  case original_purchase_date_pst
  case expires_date
  case expires_date_ms
  case expires_date_pst
  case web_order_line_item_id
  case is_trial_period
  case is_in_intro_offer_period
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum StoreKitReceiptPendingRenewalKeys : Swift.String {
  case auto_renew_product_id
  case original_transaction_id
  case product_id
  case auto_renew_status
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum StoreKitStatusCodes : Swift.Int {
  case statusOK = 0
  case unreadableJSON = 21000
  case receiptMalformed = 21002
  case receiptAuthFailed = 21003
  case sharedSecretInvalid = 21004
  case receiptServerUnavailable = 21005
  case subscriptionExpired = 21006
  case receiptFromSandboxEnvironment = 21007
  case receiptFromProdEnvironent = 21008
  case namiError = 99999
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public class NamiReceiptWrapper : ObjectiveC.NSObject {
  @objc public var hasReceiptData: Swift.Bool {
    @objc get
  }
  @objc public var statusCode: Swift.Int {
    @objc get
  }
  @objc public var storeKitEnvironmentObjC: StoreKitEnvironmentObjC {
    @objc get
  }
  public var storeKitEnvironment: StoreKitEnvironment {
    get
  }
  @objc public func latestReceiptInfoDict() -> [[Swift.String : Any]]?
  @objc public func sortedIAPItems() -> [NamiReceiptIAPWrapper]
  @objc override dynamic public init()
  @objc deinit
}
@objc public class NamiReceiptIAPWrapper : ObjectiveC.NSObject {
  @objc public init(jsonDict: [Swift.String : Any])
  @objc override dynamic public init()
  @objc deinit
}
extension NamiSignals : Swift.Equatable {}
extension NamiSignals : Swift.Hashable {}
extension NamiPaywallInitiationType : Swift.Equatable {}
extension NamiPaywallInitiationType : Swift.Hashable {}
extension BypassAdvanceSecondConstants : Swift.Equatable {}
extension BypassAdvanceSecondConstants : Swift.Hashable {}
extension BypassAdvanceSecondConstants : Swift.RawRepresentable {}
extension StoreKitEnvironment : Swift.Hashable {}
extension StoreKitEnvironment : Swift.RawRepresentable {}
extension StoreKitEnvironmentObjC : Swift.Equatable {}
extension StoreKitEnvironmentObjC : Swift.Hashable {}
extension StoreKitEnvironmentObjC : Swift.RawRepresentable {}
extension NamiPurchaseState : Swift.Equatable {}
extension NamiPurchaseState : Swift.Hashable {}
extension NamiPurchaseState : Swift.RawRepresentable {}
extension SandboxAccelerationItemUnit : Swift.Hashable {}
extension SandboxAccelerationItemUnit : Swift.RawRepresentable {}
extension NamiAnalyticsActionType : Swift.Equatable {}
extension NamiAnalyticsActionType : Swift.Hashable {}
extension NamiAnalyticsActionType : Swift.RawRepresentable {}
extension NamiAnalyticsPurchaseActivityType : Swift.Equatable {}
extension NamiAnalyticsPurchaseActivityType : Swift.Hashable {}
extension NamiAnalyticsPurchaseActivityType : Swift.RawRepresentable {}
extension NamiServerConfigKeys : Swift.Equatable {}
extension NamiServerConfigKeys : Swift.Hashable {}
extension NamiServerConfigKeys : Swift.RawRepresentable {}
extension NamiCampaignPaywallMappingKeys : Swift.Equatable {}
extension NamiCampaignPaywallMappingKeys : Swift.Hashable {}
extension NamiCampaignPaywallMappingKeys : Swift.RawRepresentable {}
extension NamiMetaCampaignConfigKeys : Swift.Equatable {}
extension NamiMetaCampaignConfigKeys : Swift.Hashable {}
extension NamiMetaCampaignConfigKeys : Swift.RawRepresentable {}
extension NamiMetaPaywallKeys : Swift.Equatable {}
extension NamiMetaPaywallKeys : Swift.Hashable {}
extension NamiMetaPaywallKeys : Swift.RawRepresentable {}
extension NamiMetaProductKeys : Swift.Equatable {}
extension NamiMetaProductKeys : Swift.Hashable {}
extension NamiMetaProductKeys : Swift.RawRepresentable {}
extension NamiMetaPaywallConfigKeys : Swift.Equatable {}
extension NamiMetaPaywallConfigKeys : Swift.Hashable {}
extension NamiMetaPaywallConfigKeys : Swift.RawRepresentable {}
extension NamiPurchaseSource : Swift.Hashable {}
extension NamiPurchaseSource : Swift.RawRepresentable {}
extension NamiPurchaseResult : Swift.Equatable {}
extension NamiPurchaseResult : Swift.Hashable {}
extension NamiPurchaseResult : Swift.RawRepresentable {}
extension PurchaseReadyState : Swift.Equatable {}
extension PurchaseReadyState : Swift.Hashable {}
extension PurchaseReadyState : Swift.RawRepresentable {}
extension StoreKitReceiptKeys : Swift.Equatable {}
extension StoreKitReceiptKeys : Swift.Hashable {}
extension StoreKitReceiptKeys : Swift.RawRepresentable {}
extension StoreKitReceiptInAppItemKeys : Swift.Equatable {}
extension StoreKitReceiptInAppItemKeys : Swift.Hashable {}
extension StoreKitReceiptInAppItemKeys : Swift.RawRepresentable {}
extension StoreKitReceiptPendingRenewalKeys : Swift.Equatable {}
extension StoreKitReceiptPendingRenewalKeys : Swift.Hashable {}
extension StoreKitReceiptPendingRenewalKeys : Swift.RawRepresentable {}
extension StoreKitStatusCodes : Swift.Equatable {}
extension StoreKitStatusCodes : Swift.Hashable {}
extension StoreKitStatusCodes : Swift.RawRepresentable {}
